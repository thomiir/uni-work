     1                                  bits 32 ; assembling for the 32 bits architecture
     2                                  
     3                                  ; declare the EntryPoint (a label defining the very first instruction of the program)
     4                                  global start        
     5                                  
     6                                  ; declare external functions needed by our program
     7                                  extern exit               ; tell nasm that exit exists even if we won't be defining it
     8                                  import exit msvcrt.dll    ; exit is a function that ends the calling process. It is defined in msvcrt.dll
     9                                                            ; msvcrt.dll contains exit, printf and all the other important C-runtime specific functions
    10                                  
    11                                  ; our data is declared here (the variables needed by our program)
    12                                  segment data use32 class=data
    13 00000000 616263626566                S1 db 'a', 'b', 'c', 'b', 'e', 'f'
    14                                      lungime_S1 equ $-S1
    15 00000006 3132333435                  S2 db '1', '2', '3', '4', '5'
    16                                      lungime_S2 equ $-S2
    17 0000000B 00<rept>                    D times lungime_S1+lungime_S2 db 0
    18                                      
    19                                  ; our code starts here
    20                                  segment code use32 class=code
    21                                      start:
    22 00000000 B905000000                      mov ecx, lungime_S2
    23 00000005 B800000000                      mov eax, 0  ; cu eax ne deplasam in S2
    24 0000000A BE00000000                      mov esi, 0  ; cu esi ne deplasam in D
    25 0000000F E312                            jecxz sfarsit_repeta1
    26                                          repeta_1:
    27 00000011 8A90[06000000]                      mov dl, [S2+eax] ; punem in registrul dl valorile S2[0], S2[2]... care corespund S2[1], S2[3].. din cerinta
    28 00000017 8896[0B000000]                      mov [D+esi], dl    ; punem in D[0], D[1]... valoarea din registrul dl 
    29 0000001D 83C002                              add eax, 2         ; ne mutam la urmatorul element din S2
    30 00000020 46                                  inc esi            ; crestem lungimea lui D
    31 00000021 E2EE                            loop repeta_1 ; am mutat in D toate elementele de pe pozitii impare din S2
    32                                  
    33                                          sfarsit_repeta1:
    34 00000023 B906000000                      mov ecx, lungime_S1
    35 00000028 B800000000                      mov eax, 0  ; cu eax ne deplasam in S1
    36                                                      ; esi ramane la aceeasi valoare din bucla trecuta
    37 0000002D E312                            jecxz sfarsit_repeta2
    38                                          repeta_2:
    39 0000002F 8A90[01000000]                      mov dl, [S1+1+eax] ; punem in registrul dl valorile S1[1], S1[3]... care corespund S1[2], S1[4].. din cerinta
    40 00000035 8896[0B000000]                      mov [D+esi], dl      ; punem in D[esi] ramas din bucla trecuta valoarea din registrul dl
    41 0000003B 83C002                              add eax, 2           ; ne mutam la urmatorul element din S1
    42 0000003E 46                                  inc esi              ; crestem lungimea lui D
    43 0000003F E2EE                             loop repeta_2 ; am concatenat la D toate elementele de pe pozitii pare din S1
    44                                          
    45                                          sfarsit_repeta2:
    46 00000041 6A00                            push    dword 0      ; push the parameter for exit onto the stack
    47 00000043 FF15[00000000]                  call    [exit]       ; call exit to terminate the program
