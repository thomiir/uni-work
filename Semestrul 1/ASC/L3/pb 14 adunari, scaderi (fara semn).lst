     1                                  bits 32 ; assembling for the 32 bits architecture
     2                                  
     3                                  ; declare the EntryPoint (a label defining the very first instruction of the program)
     4                                  global start        
     5                                  
     6                                  ; declare external functions needed by our program
     7                                  extern exit               ; tell nasm that exit exists even if we won't be defining it
     8                                  import exit msvcrt.dll    ; exit is a function that ends the calling process. It is defined in msvcrt.dll
     9                                                            ; msvcrt.dll contains exit, printf and all the other important C-runtime specific functions
    10                                  
    11                                  ; our data is declared here (the variables needed by our program)
    12                                  segment data use32 class=data
    13 00000000 01                          a db 1
    14 00000001 0200                        b dw 2
    15 00000003 03000000                    c dd 3
    16 00000007 0400000000000000            d dq 4
    17                                  
    18                                  ; our code starts here
    19                                  segment code use32 class=code
    20                                      start:
    21                                          ;edx : eax = d
    22                                          ;ecx : ebx = a
    23                                          ; (a + d) - (c - b) + c = (1 + 4) - (3 - 2) + 3 = 5 - 1 + 3 = 7
    24 00000000 A1[07000000]                    mov eax, dword [d]
    25 00000005 8B15[0B000000]                  mov edx, dword [d+4]
    26 0000000B B900000000                      mov ecx, 0
    27 00000010 BB00000000                      mov ebx, 0
    28 00000015 8A1D[00000000]                  mov bl, [a]
    29 0000001B 01C3                            add ebx, eax
    30 0000001D 11D1                            adc ecx, edx ; ecx : ebx = (a + d)
    31                                          
    32 0000001F A1[03000000]                    mov eax, [c]
    33 00000024 BA00000000                      mov edx, 0
    34 00000029 668B15[01000000]                mov dx, [b]
    35 00000030 29D0                            sub eax, edx ; eax = eax - edx = (c - b)
    36                                          
    37 00000032 BA00000000                      mov edx, 0   ; edx : eax = (c - b)
    38                                                       ; ecx : ebx = (a + d)
    39 00000037 29C3                            sub ebx, eax
    40 00000039 19D1                            sbb ecx, edx ; ecx : ebx = (a + d) - (c - b)
    41                                          
    42 0000003B BA00000000                      mov edx, 0
    43 00000040 A1[03000000]                    mov eax, [c] ; edx : eax = c
    44                                          
    45 00000045 01C3                            add ebx, eax
    46 00000047 11D1                            adc ecx, edx ; ecx : ebx = (a + d) - (c - b) + c      
    47                                          
    48 00000049 6A00                            push    dword 0      ; push the parameter for exit onto the stack
    49 0000004B FF15[00000000]                  call    [exit]       ; call exit to terminate the program
