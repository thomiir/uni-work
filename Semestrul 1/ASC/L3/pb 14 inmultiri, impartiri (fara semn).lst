     1                                  bits 32 ; assembling for the 32 bits architecture
     2                                  
     3                                  ; declare the EntryPoint (a label defining the very first instruction of the program)
     4                                  global start        
     5                                  
     6                                  ; declare external functions needed by our program
     7                                  extern exit               ; tell nasm that exit exists even if we won't be defining it
     8                                  import exit msvcrt.dll    ; exit is a function that ends the calling process. It is defined in msvcrt.dll
     9                                                            ; msvcrt.dll contains exit, printf and all the other important C-runtime specific functions
    10                                  
    11                                  ; our data is declared here (the variables needed by our program)
    12                                  segment data use32 class=data
    13 00000000 01                          a db 1
    14 00000001 0800                        b dw 8
    15 00000003 03000000                    c dd 3 
    16 00000007 0400000000000000            x dq 4
    17                                  ; our code starts here
    18                                  segment code use32 class=code
    19                                      start:
    20                                          ; rezultat = x + (2 - a * b) / (a * 3) - a + c = 4 + (2 - 1 * 8) / (1 * 3) - 1 + 3 =  
    21                                          ;         = 4 + (2 - 8) / 3 + 2 = 4 + (-6)/3 + 2 = 4 - 2 + 2 = 4
    22                                          
    23 00000000 A0[00000000]                    mov al, [a]
    24 00000005 B400                            mov ah, 0 
    25 00000007 668B1D[01000000]                mov bx, [b]
    26 0000000E 66F7E3                          mul bx  ; dx : ax = ax * bx = a * b = 1 * 8 = 8 = 8h
    27                                          
    28 00000011 66B90000                        mov cx, 0
    29 00000015 66BB0200                        mov bx, 2 ; cx : bx = 2
    30 00000019 6629C3                          sub bx, ax
    31 0000001C 6619D1                          sbb cx, dx ; cx : bx = cx : bx - dx : ax = 2 - a * b = 2 - 8 = - 6 = FAh
    32                                  
    33 0000001F A0[00000000]                    mov al, [a]
    34 00000024 B203                            mov dl, 3
    35 00000026 F6E2                            mul dl  ; ax = al * dl = a * 3 = 3
    36                                          
    37 00000028 6650                            push ax
    38                                          
    39 0000002A 6689CA                          mov dx, cx 
    40 0000002D 6689D8                          mov ax, bx ; dx : ax = cx : bx = 2 - a * b = -6 = FAh
    41                                          
    42 00000030 6659                            pop cx
    43                                          
    44 00000032 66F7F9                          idiv cx ; ax = dx : ax / cx = (2 - a * b) / (a * 3) 
    45                                          
    46 00000035 8A1D[00000000]                  mov bl, [a]
    47 0000003B B700                            mov bh, 0
    48                                          
    49 0000003D 6629D8                          sub ax, bx ; ax = ax - bx = (2 - a * b) / (a * 3) - a = -2 -1 = -3
    50                                          
    51 00000040 66B90000                        mov cx, 0
    52 00000044 6651                            push cx
    53 00000046 6650                            push ax
    54 00000048 58                              pop eax
    55                                          
    56 00000049 0305[03000000]                  add eax, [c] ; eax = eax + bx = (2 - a * b) / (a * 3) - a + c = -3 + 3 = 0
    57                                          
    58 0000004F FF35[07000000]                  push dword [x]
    59 00000055 FF35[0B000000]                  push dword [x+4]
    60 0000005B 5B                              pop ebx
    61 0000005C 59                              pop ecx ; ebx : ecx = x
    62                                          
    63 0000005D BA00000000                      mov edx, 0
    64 00000062 01C8                            add eax, ecx
    65 00000064 11DA                            adc edx, ebx ; edx : eax = edx : eax + ebx : ecx = x + (2 - a * b) / (a * 3) - a + c = 0 + 4 = 4 
    66                                          
    67                                          
    68                                          
    69                                          
    70 00000066 6A00                            push    dword 0      ; push the parameter for exit onto the stack
    71 00000068 FF15[00000000]                  call    [exit]       ; call exit to terminate the program
