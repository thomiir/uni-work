     1                                  bits 32 ; assembling for the 32 bits architecture
     2                                  
     3                                  ; declare the EntryPoint (a label defining the very first instruction of the program)
     4                                  global start        
     5                                  
     6                                  ; declare external functions needed by our program
     7                                  extern exit               ; tell nasm that exit exists even if we won't be defining it
     8                                  import exit msvcrt.dll    ; exit is a function that ends the calling process. It is defined in msvcrt.dll
     9                                                            ; msvcrt.dll contains exit, printf and all the other important C-runtime specific functions
    10                                  
    11                                  ; our data is declared here (the variables needed by our program)
    12                                  segment data use32 class=data
    13 00000000 FF                          a db -1
    14 00000001 0400                        b dw 4
    15 00000003 04000000                    c dd 4 
    16 00000007 0A00000000000000            x dq 10
    17                                  ; our code starts here
    18                                  segment code use32 class=code
    19                                      start:
    20                                          ; rezultat = x + (2 - a * b) / (a * 3) - a + c = 
    21                                          ; rezultat = 10 + (2 - (-1) * 4) / ((-1) * 3)) - (-1) + 4 = 10 + 6/(-3) + 1 + 4 = 10 - 2 + 1 + 4 = 13
    22                                          
    23 00000000 A0[00000000]                    mov al, [a]
    24 00000005 6698                            cbw
    25 00000007 66F72D[01000000]                imul word [b]   ; dx : ax = a * b = (-1) * 4 = -4
    26                                          
    27 0000000E 66B90000                        mov cx, 0
    28 00000012 66BB0200                        mov bx, 2      ; cx : bx = 2
    29 00000016 6629C3                          sub bx, ax
    30 00000019 6619D1                          sbb cx, dx     ; cx : bx = dx : ax - cx : bx = 2 - a * b = 2 - (-4) = 6
    31                                          
    32 0000001C A0[00000000]                    mov al, [a]
    33 00000021 B203                            mov dl, 3
    34 00000023 F6EA                            imul dl         ; ax = al * dl = a * 3 = -1 * 3 = -3
    35 00000025 6650                            push ax
    36                                          
    37 00000027 6689CA                          mov dx, cx
    38 0000002A 6689D8                          mov ax, bx      ; dx : ax = cx : bx = 2 - a * b = 6
    39 0000002D 6659                            pop cx
    40 0000002F 66F7F9                          idiv cx         ; ax = dx : ax / cx = 6 / (-3) = -2
    41 00000032 6689C1                          mov cx, ax      ; cx = -2
    42                                          
    43 00000035 A0[00000000]                    mov al, [a]
    44 0000003A 6698                            cbw             ; ax = a
    45 0000003C 6629C1                          sub cx, ax      ; cx = cx - a = -2 - (-1) = -1
    46 0000003F 6689C8                          mov ax, cx      ; ax = -1
    47 00000042 6699                            cwd             ; eax = -1
    48 00000044 8B1D[03000000]                  mov ebx, [c]    
    49 0000004A 01D8                            add eax, ebx    ; eax = eax + ebx = -1 + 4 = 3
    50                                          
    51 0000004C 99                              cdq             ; edx : eax = 3
    52                                          
    53 0000004D FF35[07000000]                  push dword [x]
    54 00000053 FF35[0B000000]                  push dword [x+4]
    55 00000059 5B                              pop ebx
    56 0000005A 59                              pop ecx         ; ebx : ecx = x = 10
    57                                          
    58 0000005B 01C8                            add eax, ecx
    59 0000005D 11DA                            adc edx, ebx   ; edx : eax = edx : eax + ebx : ecx = 3 + 10 = 13
    60                                          
    61                                          
    62                                          
    63                                          
    64 0000005F 6A00                            push    dword 0      ; push the parameter for exit onto the stack
    65 00000061 FF15[00000000]                  call    [exit]       ; call exit to terminate the program
